#include "stdafx.h"
#include "CppUnitTest.h"
#include "SparseGridCollocation.h"
#include "Interpolation.h"
#include "windows.h"
#include "testCommon.h"
#include "Common.h"

#include <fstream>
#include <iostream>
#include <sstream>
#include <string>

#define UNITTEST

using Eigen::Matrix2d;

using namespace Microsoft::VisualStudio::CppUnitTestFramework;
using namespace Leicester;


namespace UnitTest
{		
	TEST_CLASS(testShapeLambda)
	{
		vector<vector<MatrixXd>> Get_3()
		{

			/*MatrixXd l1(15, 1);
			l1 << -42.8498877775422, 141.016331069450, -249.998444271759, 258.615502944090, -123.518857109165, 65.0489756228674, -219.762990596407, 397.963768108779, -417.194722894546, 200.480323513864, -34.8966003832208, 119.274580096719, -217.965206264739, 229.772250182186, -110.694184815550;
			MatrixXd l2(15, 1);
			l2 << -0.0568069765069908, 0.0997753173328967, -0.0568069764883387, 0.0369586729170275, -0.0649139162828327, 0.0369586728689974, -0.0138051312405887, 0.0242472216107991, -0.0138051311798996, -0.0763568261614475, 0.134112516310045, -0.0763568262085483, 0.0616904205757057, -0.108352559302475, 0.0616904205955072;
			*/

			MatrixXd l1 = LoadData("inner_testLamb_3_1.txt", 15, 15, 1);
			MatrixXd l2 = LoadData("inner_testLamb_3_2.txt", 15, 15, 1);
			vector<MatrixXd> uLamb3{ l1,l2 };

			MatrixXd tx1(15, 2);
			tx1 << 0, 0, 0, 75, 0, 150, 0, 225, 0, 300, 0.432500000000000, 0, 0.432500000000000, 75, 0.432500000000000, 150, 0.432500000000000, 225, 0.432500000000000, 300, 0.865000000000000, 0, 0.865000000000000, 75, 0.865000000000000, 150, 0.865000000000000, 225, 0.865000000000000, 300;
			MatrixXd tx2(15, 2);
			tx2 << 0, 0, 0, 150, 0, 300, 0.216250000000000, 0, 0.216250000000000, 150, 0.216250000000000, 300, 0.432500000000000, 0, 0.432500000000000, 150, 0.432500000000000, 300, 0.648750000000000, 0, 0.648750000000000, 150, 0.648750000000000, 300, 0.865000000000000, 0, 0.865000000000000, 150, 0.865000000000000, 300;
			vector<MatrixXd> uTX{ tx1,tx2 };

			MatrixXd c1(1, 2);
			c1 << 1.73000000000000, 600;
			MatrixXd c2(1, 2);
			c2 << 1.73000000000000, 600;
			vector<MatrixXd> uC = { c1, c2 };

			MatrixXd a1(1, 2);
			a1 << 2, 4;
			MatrixXd a2(1, 2);
			a2 << 4, 2;
			vector<MatrixXd> uA = { a1, a2 };

			vector<vector<MatrixXd>> third = { uLamb3, uTX, uC, uA };
			return third;
		}

		vector<vector<MatrixXd>> Get3()
		{
			vector<MatrixXd> uLamb3;
			//MatrixXd l1(15, 1);
			//l1 << 168.177040362907, -384.857133569469, 437.285285931294, -355.212798882940, 443.385219414521, -109.178371522743, 221.964431301908, -185.896683167106, 91.7816691444462, -271.563020925667, 179.474487920222, -412.630669834898, 475.510735359416, -393.047823887079, 457.473155903381;
			//uLamb3.push_back(l1);
			//MatrixXd l2(15, 1);
			//l2 << 266.292960914272, -700.744331062505, 759.616443800679, -184.485437051410, 574.752360107266, -715.267344742912, 324.264851093682, -938.943872118302, 1106.30094053661, -187.682488571149, 578.284311734800, -714.053999346216, 276.596980754002, -715.471078725550, 762.783738957473;

			MatrixXd l1 = LoadData("inner_testLamb3_1.txt", 15, 15, 1);
			MatrixXd l2 = LoadData("inner_testLamb3_2.txt", 15, 15, 1);

			uLamb3 = { l1,l2 };

			MatrixXd TX1 = MatrixXd(15, 2);
			TX1 << 0, 0, 0, 75, 0, 150, 0, 225, 0, 300, 0.4325, 0, 0.4325, 75, 0.4325, 150, 0.4325, 225, 0.4325, 300, 0.865, 0, 0.865, 75, 0.865, 150, 0.865, 225, 0.865, 300;
			MatrixXd TX2 = MatrixXd(15, 2);
			TX2 << 0, 0, 0, 150, 0, 300, 0.216250000000000, 0, 0.216250000000000, 150, 0.216250000000000, 300, 0.432500000000000, 0, 0.432500000000000, 150, 0.432500000000000, 300, 0.648750000000000, 0, 0.648750000000000, 150, 0.648750000000000, 300, 0.865000000000000, 0, 0.865000000000000, 150, 0.865000000000000, 300;
			vector<MatrixXd> uTX = { TX1, TX2 };

			MatrixXd c1(1, 2);
			c1 << 1.73000000000000, 600;
			MatrixXd c2(1, 2);
			c2 << 1.73000000000000, 600;
			vector<MatrixXd> uC = { c1, c2 };

			MatrixXd a1(1, 2);
			a1 << 2, 4;
			MatrixXd a2(1, 2);
			a2 << 4, 2;
			vector<MatrixXd> uA = { a1, a2 };
			vector<vector<MatrixXd>> third = { uLamb3, uTX, uC, uA };
			return third;
		};

		vector<vector<MatrixXd>> Get2()
		{
			vector<MatrixXd> uLamb3;
			/*MatrixXd l1(9, 1);
			l1 << 273.169921181606,				- 696.599817216584,				732.148991790275,				- 191.889255272131,				521.665751945236,				- 582.757329851410,				284.102691920217,				- 712.786022564190,				736.696836746533;
			*/
			MatrixXd l1 = LoadData("inner_testLamb2_1.txt", 9, 9, 1);
			uLamb3.push_back(l1);

			MatrixXd TX1 = MatrixXd(9, 2);
			TX1 << 0, 0, 0, 150, 0, 300, 0.432500000000000, 0, 0.432500000000000, 150, 0.432500000000000, 300, 0.865000000000000, 0, 0.865000000000000, 150, 0.865000000000000, 300;
			vector<MatrixXd> uTX = { TX1 };

			MatrixXd c1(1, 2);
			c1 << 1.73000000000000, 600;
			vector<MatrixXd> uC = { c1 };

			MatrixXd a1(1, 2);
			a1 << 2, 2;
			vector<MatrixXd> uA = { a1 };
			vector<vector<MatrixXd>> third = { uLamb3, uTX, uC, uA };
			return third;

		};

		MatrixXd LoadData(string fileName, int size, int rows, int columns)
		{
			const int N = 15;

			double *U = (double*)malloc(N * sizeof(double));

			std::ifstream infile;
			//infile.open(L"C:\\Users\\User\\Documents\\Visual Studio 2017\\Projects\\ConsoleApplication1\\x64\\Debug\\inner_testD.txt", std::ios::in | std::ios::binary);
			string path = "C:\\Users\\User\\Source\\Repos\\SparseGridCollocation\\SparseGridCollocation\\x64\\Debug\\";
			string fpath = path + fileName;
			infile.open(fpath, std::ios::in | std::ios::binary);
			infile.read((char*)U, size * sizeof(double));
			infile.close();

			MatrixXd result = MatrixXd::Zero(rows, columns);
			int rowCount = 0, colCount = 0;
			for (int i = 0; i < size; i++)
			{
				result(rowCount, colCount) = U[i];
				if (colCount == columns - 1)
				{
					colCount = 0;
					rowCount++;
				}
				else
					colCount++;
			}

			delete U;

			Logger::WriteMessage(Common::printMatrix(result).c_str());
			return result;
		};
	
	public:
		

		TEST_METHOD(TestPrintMatrix)
		{


			SparseGridCollocation* test = new SparseGridCollocation();
			MatrixXd uLamb(7, 2);
			uLamb << 168.177040362907, -384.857133569469, 437.285285931294, -355.212798882940, 443.385219414521, -109.178371522743, 221.964431301908, -185.896683167106, 91.7816691444462, -271.563020925667, 179.474487920222, -412.630669834898, 475.510735359416, -393.047823887079;
			wstring s = Common::printMatrix(uLamb);
						
			Logger::WriteMessage(s.c_str());
		}

		TEST_METHOD(TestShapeLambda2D)
		{
			Interpolation test;
			int ch = 10000;
			double inx1 = 0;
			double inx2 = 300;
			VectorXd x = VectorXd::LinSpaced(ch, inx1, inx2);
			VectorXd t(ch);
			t.fill(0);

			
			Matrix<double, 2, 2> N;
			N << 3, 5, 5, 3;

			vector<MatrixXd> uLamb3;
			MatrixXd l1(15, 1);
			l1 << 168.177040362907, -384.857133569469, 437.285285931294, -355.212798882940, 443.385219414521, -109.178371522743, 221.964431301908, -185.896683167106, 91.7816691444462, -271.563020925667, 179.474487920222, -412.630669834898, 475.510735359416, -393.047823887079, 457.473155903381;
			uLamb3.push_back(l1);
			MatrixXd l2(15, 1);
			l2 << 266.292960914272, -700.744331062505, 759.616443800679, -184.485437051410, 574.752360107266, -715.267344742912, 324.264851093682, -938.943872118302, 1106.30094053661, -187.682488571149, 578.284311734800, -714.053999346216, 276.596980754002, -715.471078725550, 762.783738957473;
			uLamb3.push_back(l2);

			MatrixXd TX1 = MatrixXd(15, 2);
			TX1 << 0, 0, 0, 75, 0, 150, 0, 225, 0, 300, 0.4325, 0, 0.4325, 75, 0.4325, 150, 0.4325, 225, 0.4325, 300, 0.865, 0, 0.865, 75, 0.865, 150, 0.865, 225, 0.865, 300;
			MatrixXd TX2 = MatrixXd(15, 2);
			TX2 << 0, 0, 0, 150, 0, 300, 0.216250000000000, 0, 0.216250000000000, 150, 0.216250000000000, 300, 0.432500000000000, 0, 0.432500000000000, 150, 0.432500000000000, 300, 0.648750000000000, 0, 0.648750000000000, 150, 0.648750000000000, 300, 0.865000000000000, 0, 0.865000000000000, 150, 0.865000000000000, 300;
			vector<MatrixXd> uTX = { TX1, TX2 };

			MatrixXd c1(1, 2);
			c1 << 1.73000000000000, 600;
			MatrixXd c2(1, 2);
			c2 << 1.73000000000000, 600;
			vector<MatrixXd> uC = { c1, c2 };

			MatrixXd a1(1, 2);
			a1 << 2, 4;
			MatrixXd a2(1, 2);
			a2 << 4, 2;
			vector<MatrixXd> uA = { a1, a2 };

			
			//TODO: improve test to iterate more than once:
			for (int i = 0; i < N.rows(); i++)
			//for (int i = 0; i < 1; i++)
			{
				double coef = 2;
				double tsec = 0.8650L;
				double r = 0.03;
				double sigma = 0.15;
				double T = 1;
				double E = 100;
				double inx1 = 0;
				double inx2 = 300;
				
				map< string, vector<vector<MatrixXd>>> vInterpolation;
				vector<string> level2 = {};
				test.shapelambda2DGeneric("2", 3, coef, tsec, r, sigma, T, E, inx1, inx2, N.row(i), level2, &vInterpolation);
				
				MatrixXd result = test.getLambda(3);
				Assert::IsTrue(testCommon::checkMatrix(uLamb3[i],  result, 1));
				result = test.getTX(3);
				Assert::IsTrue(testCommon::checkMatrix(uTX[i], result));
				result = test.getC(3);
				Assert::IsTrue(testCommon::checkMatrix(uC[i], result));
				result = test.getA(3);
				Assert::IsTrue(testCommon::checkMatrix(uA[i], result));
			}
		}

		//TEST_METHOD(TestShapeLambda2D_1)
		//{
		//	Interpolation test;
		//	int ch = 10000;

		//	double coef = 2;
		//	double tsec = 0.8650L;
		//	double r = 0.03;
		//	double sigma = 0.15;
		//	double T = 1;
		//	double E = 100;
		//	double inx1 = 0;
		//	double inx2 = 300;
		//	VectorXd x = VectorXd::LinSpaced(ch, inx1, inx2);
		//	VectorXd t(ch);
		//	t.fill(0);

		//	MatrixXd N(1,2);
		//	N << 3,9;
		//	map< string, vector<vector<MatrixXd>>> vInterpolation;
		//	vInterpolation["2"] = Get2();
		//	vInterpolation["3"] = Get3();

		//	vector<vector<MatrixXd>> _3 = Get_3();

		//	//TODO: improve test to iterate more than once:
		//	for (int i = 0; i < N.rows(); i++)
		//		//for (int i = 0; i < 1; i++)
		//	{
		//		vector<string> level2 = {"2", "3"};
		//		test.shapelambda2DGeneric("_3", 3, coef, tsec, r, sigma, T, E, inx1, inx2, N.row(i), level2, &vInterpolation);
		//		MatrixXd result = test.getLambda(3);

		//		Assert::IsTrue(testCommon::checkMatrix(_3[0][i], result, 1));
		//		result = test.getTX(3);
		//		Assert::IsTrue(testCommon::checkMatrix(_3[1][i], result));
		//		result = test.getC(3);
		//		Assert::IsTrue(testCommon::checkMatrix(_3[2][i], result));
		//		result = test.getA(3);
		//		Assert::IsTrue(testCommon::checkMatrix(_3[3][i], result));
		//	}
		//}

		TEST_METHOD(TestPartialPivotLU)
		{
			MatrixXd P1(15, 15);
			P1 << 1, 0.778800783071405, 0.367879441171442, 0.105399224561864, 0.0183156388887342, 0.778800783071405, 0.606530659712633, 0.286504796860190, 0.0820849986238988, 0.0142642339089993, 0.367879441171442, 0.286504796860190, 0.135335283236613, 0.0387742078317220, 0.00673794699908547, -0.0372364124406015, -0.0356250000000000, -0.0138723889484594, 0.00206932185658937, 0.00365603560198967, 0.672191766951141, 0.872602948197191, 0.690387686742520, 0.332831007817818, 0.0977432755561235, 0.648740326071082, 0.837482598194839, 0.657335469976888, 0.313675210648235, 0.0909963279219594, -0.0248318622790724, -0.0554895557938376, -0.0525000000000000, -0.00876150880955330, 0.0193136706615007, 0.311880344547417, 0.657976204614126, 0.859460684982861, 0.694368044196884, 0.346260920170640, 0.303778818061558, 0.642025369894671, 0.831274632625071, 0.659215657706283, 0.320019052049951, 0.00128455304934772, -0.0255216362312688, -0.0781234535518503, -0.0806250000000000, -0.00803138307542385, 0.0958963630870858, 0.311343148053304, 0.640348907316228, 0.837556912958978, 0.694936666690365, 0.0901239082457457, 0.303525064405489, 0.633698824235922, 0.820928023342124, 0.659484255953339, 0.0183156388887342, 0.105399224561864, 0.367879441171442, 0.778800783071405, 1, 0.0142642339089993, 0.0820849986238988, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.00673794699908547, 0.0387742078317220, 0.135335283236613, 0.286504796860190, 0.367879441171442, 0.778800783071405, 0.606530659712633, 0.286504796860190, 0.0820849986238988, 0.0142642339089993, 1, 0.778800783071405, 0.367879441171442, 0.105399224561864, 0.0183156388887342, 0.778800783071405, 0.606530659712633, 0.286504796860190, 0.0820849986238988, 0.0142642339089993, -0.730191261286162, -0.928092503991029, -0.711995341494783, -0.329607828853141, -0.0920486287765905, -0.0372364124406015, -0.0356250000000000, -0.0138723889484594, 0.00206932185658937, 0.00365603560198967, 0.672191766951141, 0.872602948197191, 0.690387686742520, 0.332831007817818, 0.0977432755561235, -0.350558492123543, -0.744406823623177, -0.941234767205358, -0.708014984040418, -0.316177916500320, -0.0248318622790724, -0.0554895557938376, -0.0525000000000000, -0.00876150880955330, 0.0193136706615007, 0.311880344547417, 0.657976204614126, 0.859460684982861, 0.694368044196884, 0.346260920170640, -0.0938955412456282, -0.351095688617656, -0.762034120921075, -0.963138539229242, -0.707446361546938, 0.00128455304934772, -0.0255216362312688, -0.0781234535518503, -0.0806250000000000, -0.00803138307542385, 0.0958963630870858, 0.311343148053304, 0.640348907316228, 0.837556912958978, 0.694936666690365, 0.0142642339089993, 0.0820849986238988, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.0183156388887342, 0.105399224561864, 0.367879441171442, 0.778800783071405, 1, 0.0142642339089993, 0.0820849986238988, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.367879441171442, 0.286504796860190, 0.135335283236613, 0.0387742078317220, 0.00673794699908547, 0.778800783071405, 0.606530659712633, 0.286504796860190, 0.0820849986238988, 0.0142642339089993, 1, 0.778800783071405, 0.367879441171442, 0.105399224561864, 0.0183156388887342, 0.286504796860190, 0.367879441171442, 0.286504796860190, 0.135335283236613, 0.0387742078317220, 0.606530659712633, 0.778800783071405, 0.606530659712633, 0.286504796860190, 0.0820849986238988, 0.778800783071405, 1, 0.778800783071405, 0.367879441171442, 0.105399224561864, 0.135335283236613, 0.286504796860190, 0.367879441171442, 0.286504796860190, 0.135335283236613, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.606530659712633, 0.286504796860190, 0.367879441171442, 0.778800783071405, 1, 0.778800783071405, 0.367879441171442, 0.0387742078317220, 0.135335283236613, 0.286504796860190, 0.367879441171442, 0.286504796860190, 0.0820849986238988, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.606530659712633, 0.105399224561864, 0.367879441171442, 0.778800783071405, 1, 0.778800783071405, 0.00673794699908547, 0.0387742078317220, 0.135335283236613, 0.286504796860190, 0.367879441171442, 0.0142642339089993, 0.0820849986238988, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.0183156388887342, 0.105399224561864, 0.367879441171442, 0.778800783071405, 1;
			MatrixXd U1(15, 1);
			U1 << 0, 0, 0, 0, 202.955446645149, 0, 0, 0, 0, 201.688089364998, -1.03739239420975e-11, 1.15259553012947e-07, 50.4041809807088, 125.404180981023, 200.404180981052;

			PartialPivLU<MatrixXd> lu1 = PartialPivLU<MatrixXd>(P1);
			MatrixXd J1 = lu1.matrixLU().triangularView<UpLoType::Upper>();
			MatrixXd F1 = lu1.matrixLU().triangularView<UpLoType::UnitLower>();
			MatrixXd perm = lu1.permutationP().transpose();
			MatrixXd F1p = perm * F1;

			MatrixXd Jlamda1 = F1p.lu().solve(U1);
			MatrixXd l1 = J1.lu().solve(Jlamda1);

			MatrixXd uF1(15, 15);
			uF1 << 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0372364124406015, 0.0140546689769362, -0.0452385097715426, -0.0517674670273550, 0.0747246351665369, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0248318622790724, 0.0766888556246869, -0.0761624246109041, 0.0150944211110786, -0.0262312341084053, 0.467228679960101, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0.00128455304934772, 0.0562633008485412, 0.132367413455039, 0.162733610762957, -0.0288279409198760, 0.149290511832314, 0.702198941789184, 0.644350676317409, 0.803515204300723, 1, 0, 0, 0, 0, 0, 0.0183156388887342, -0.193331810608177, -0.821301501258606, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.778800783071405, 0, 0, 0, 0, 0.584906975230744, -0.796444738224838, 0.799253602117634, -8.93866557054938e-17, -6.41606364704878e-16, -0.394878533496188, 0.488714003762991, -0.588861776862525, 1, 0, -0.730191261286162, 0.762463695539903, -0.708031367037899, -0.717263164522097, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.350558492123543, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0938955412456282, 0.589679091130638, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0142642339089993, -0.150566965494261, -0.639630252317923, 0.778800783071404, 1.81304049514203e-15, 0.0107129449418273, 0.125732284562640, 0.325813589115655, 0.799253602117632, 7.93138514671781e-16, -0.00723245262442965, -0.0804328327927251, -0.269247997035968, -0.393918466991685, 1, 0.367879441171442, 0, 0, 0, 0, 0.731816501897551, -0.996485641246591, 1, 0, 0, 0, 0, 0, 0, 0, 0.286504796860190, -0.307068013986032, 0.274903935903905, 0.276598404477539, -0.384818514792792, 0.879255803662531, -0.0101307213683784, 0.00107476168274726, 0.00226297698359957, -0.000575009303945737, 1, 0, 0, 0, 0, 0.135335283236613, -0.384193468972114, -0.0242360805265655, 0.00480328203072379, -0.00834719095945518, 0.411965156542163, 0.885331439222043, -0.0136247032941108, -0.0266608184391997, -0.0132331595432507, 0.474910524651061, 1, 0, 0, 0, 0.0387742078317220, -0.223037281169673, -0.366475676792134, 0.0517843925660050, -0.00917350387830645, 0.124946475999194, 0.651875936359343, 0.610889443654266, 0.806376567741502, 0.909509906511464, 0.129960838729443, 0.774010046773761, 1, 0, 0, 0.00673794699908547, -0.0711227984471993, -0.302139937316283, 0.367879441171442, -5.43912148542607e-16, 0.0134036867815724, 0.157312127501846, 0.407647320265317, 1, 0, 0, 0, 0, 0, 0;
			MatrixXd uJlamda1(15, 1);
			uJlamda1 << 0, 0, 0, 202.955446645149, 145.572465917695, -0.371360013768033, 0.928560503798793, 1.19706459527417, 125.111968277027, -130.728410018305, -0.141827158344812, 51.6646559055378, 92.9803794457399, 29.4473461128487, -16.0836110719010;

			Logger::WriteMessage(Common::printMatrix(F1).c_str());
			Logger::WriteMessage(Common::printMatrix(perm).c_str());
			Logger::WriteMessage(Common::printMatrix(F1p).c_str());
			Logger::WriteMessage(Common::printMatrix(Jlamda1).c_str());

			Assert::IsTrue(testCommon::checkMatrix(uF1, F1p, 0.001));
			Assert::IsTrue(testCommon::checkMatrix(uJlamda1, Jlamda1, 0.001));

			MatrixXd P2(15, 15);
			P2 << 1, 0.778800783071405, 0.367879441171442, 0.778800783071405, 0.606530659712633, 0.286504796860190, 0.367879441171442, 0.286504796860190, 0.135335283236613, 0.105399224561864, 0.0820849986238988, 0.0387742078317220, 0.0183156388887342, 0.0142642339089993, 0.00673794699908547, -0.0372364124406015, -0.0356250000000000, -0.0138723889484594, 1.37338328106979, 1.77295067429130, 1.39157920086117, 1.31117916274204, 1.68807090148141, 1.31977430664785, 0.565451024001437, 0.727338039759302, 0.567913573960154, 0.131241541919687, 0.168740697399125, 0.131669468936957, 0.367879441171442, 0.778800783071405, 1, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.135335283236613, 0.286504796860190, 0.367879441171442, 0.0387742078317220, 0.0820849986238988, 0.105399224561864, 0.00673794699908547, 0.0142642339089993, 0.0183156388887342, 0.778800783071405, 0.606530659712633, 0.286504796860190, 1, 0.778800783071405, 0.367879441171442, 0.778800783071405, 0.606530659712633, 0.286504796860190, 0.367879441171442, 0.286504796860190, 0.135335283236613, 0.105399224561864, 0.0820849986238988, 0.0387742078317220, -1.43138277540481, -1.82844023008514, -1.41318685561343, -0.0372364124406015, -0.0356250000000000, -0.0138723889484594, 1.37338328106979, 1.77295067429130, 1.39157920086117, 1.31117916274204, 1.68807090148141, 1.31977430664785, 0.565451024001437, 0.727338039759302, 0.567913573960154, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.367879441171442, 0.778800783071405, 1, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.135335283236613, 0.286504796860190, 0.367879441171442, 0.0387742078317220, 0.0820849986238988, 0.105399224561864, 0.367879441171442, 0.286504796860190, 0.135335283236613, 0.778800783071405, 0.606530659712633, 0.286504796860190, 1, 0.778800783071405, 0.367879441171442, 0.778800783071405, 0.606530659712633, 0.286504796860190, 0.367879441171442, 0.286504796860190, 0.135335283236613, -1.33857618394180, -1.71428231166488, -1.32998104003599, -1.43138277540481, -1.82844023008514, -1.41318685561343, -0.0372364124406015, -0.0356250000000000, -0.0138723889484594, 1.37338328106979, 1.77295067429130, 1.39157920086117, 1.31117916274204, 1.68807090148141, 1.31977430664785, 0.135335283236613, 0.286504796860190, 0.367879441171442, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.367879441171442, 0.778800783071405, 1, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.135335283236613, 0.286504796860190, 0.367879441171442, 0.105399224561864, 0.0820849986238988, 0.0387742078317220, 0.367879441171442, 0.286504796860190, 0.135335283236613, 0.778800783071405, 0.606530659712633, 0.286504796860190, 1, 0.778800783071405, 0.367879441171442, 0.778800783071405, 0.606530659712634, 0.286504796860190, -0.573300401994847, -0.734847734509335, -0.570837852036130, -1.33857618394180, -1.71428231166488, -1.32998104003599, -1.43138277540481, -1.82844023008514, -1.41318685561343, -0.0372364124406015, -0.0356250000000000, -0.0138723889484594, 1.37338328106979, 1.77295067429130, 1.39157920086117, 0.0387742078317220, 0.0820849986238988, 0.105399224561864, 0.135335283236613, 0.286504796860190, 0.367879441171442, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.367879441171442, 0.778800783071405, 1, 0.286504796860190, 0.606530659712634, 0.778800783071405, 0.0183156388887342, 0.0142642339089993, 0.00673794699908547, 0.105399224561864, 0.0820849986238988, 0.0387742078317220, 0.367879441171442, 0.286504796860190, 0.135335283236613, 0.778800783071405, 0.606530659712634, 0.286504796860190, 1, 0.778800783071405, 0.367879441171442, 0.0142642339089993, 0.0183156388887342, 0.0142642339089993, 0.0820849986238988, 0.105399224561864, 0.0820849986238988, 0.286504796860190, 0.367879441171442, 0.286504796860190, 0.606530659712634, 0.778800783071405, 0.606530659712634, 0.778800783071405, 1, 0.778800783071405, 0.00673794699908547, 0.0142642339089993, 0.0183156388887342, 0.0387742078317220, 0.0820849986238988, 0.105399224561864, 0.135335283236613, 0.286504796860190, 0.367879441171442, 0.286504796860190, 0.606530659712634, 0.778800783071405, 0.367879441171442, 0.778800783071405, 1;
			MatrixXd U2(15, 1);
			U2 << 0, 0, 202.955446645149, 0, 0, 202.323823492953, 0, 0, 201.688089364998, 0, 0, 201.048217504630, -1.03739239420975e-11, 50.4041809807088, 200.404180981052;

			PartialPivLU<MatrixXd> lu2 = PartialPivLU<MatrixXd>(P2);
			MatrixXd J2 = lu2.matrixLU().triangularView<UpLoType::Upper>();
			MatrixXd F2 = lu2.matrixLU().triangularView<UpLoType::UnitLower>();
			MatrixXd perm2 = lu2.permutationP().transpose();
			MatrixXd F2p = perm2 * F2;

			MatrixXd Jlamda2 = F2p.lu().solve(U2);
			MatrixXd l2 = J2.lu().solve(Jlamda2);

			MatrixXd uF2(15, 15);
			uF2 << -0.698625145686267, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0260142940661492, -0.0239485289972919, 0.0318348144884877, -0.981520051448069, -0.00542584703728534, 0.00731809656518172, 0.0393849457786821, -0.0185916845968260, 0.0249923062245329, 1, 0, 0, 0, 0, 0, -0.257009828183381, -0.619489924161221, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.544089810533839, 0.778800783071405, -8.77369901039239e-16, -0.282160428893710, 0.799253602117635, 2.71240667552089e-15, 0.272479295490177, -0.835044993925978, -8.38578688829793e-15, 0.232042531468730, 0.963349820775518, -1.19075894416579e-14, -0.365858449205606, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.200159455446265, -0.482459238041604, 0.778800783071405, -0.103801020902112, -0.486460784888530, 0.799253602117634, 0.100239530955714, 0.510305543374679, -0.835044993925968, 0.0853636768047180, -0.589408423695545, 0.963349820775527, -0.134591801841618, -0.612380769535240, 1, -0.257009828183381, 0.367879441171442, 0, -0.353029912090632, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.935162981518505, 0.00881017146440175, -0.0117113737638218, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0945486319676707, -0.227897607111769, 0.367879441171443, -0.129872446776705, -0.608643844206201, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0736345486147520, 0.105399224561864, -5.48356188149525e-17, -0.204945784151210, 0.580533765361488, 2.26033889626741e-16, -0.326304926647258, 1, 0, 0, 0, 0, 0, 0, 0, 0.400522076865645, 0.00504831277142374, -0.00671072952231498, 0.948358475152857, -0.000491080514573403, 0.000662343520236215, 1, 0, 0, 0, 0, 0, 0, 0, 0, -0.0270886365953064, -0.0652937576304808, 0.105399224561864, -0.0753953405439900, -0.353338302641117, 0.580533765361488, -0.120040874066482, -0.611111433619247, 1, 0, 0, 0, 0, 0, 0, -0.0127957658869790, 0.0183156388887342, 0, -0.0653537275129394, 0.185122351604477, 0, -0.275607647483302, 0.844632198217586, 0, 0.240870477644273, 1, 0, 0, 0, 0, -0.00996535249277759, -0.000189708603405814, 0.000252179922907871, -0.0585657912922155, -0.000551524428821454, 0.000743867086638684, -0.305467783690763, -0.00530501221909432, 0.00713138657306881, 0.593704845269034, -0.0158269315877106, 0.0212551286678685, 1, 0, 0, -0.00470729920386243, -0.0113463537461462, 0.0183156388887342, -0.0240422927559309, -0.112673579729041, 0.185122351604477, -0.101390387338733, -0.516164393533725, 0.844632198217586, 0.0886112967104731, -0.611832182852383, 1, 0, 0, 0;

			//Logger::WriteMessage(Common::printMatrix(F2).c_str());
			//Logger::WriteMessage(Common::printMatrix(perm2).c_str());
			Logger::WriteMessage(Common::printMatrix(F2p).c_str());

			Assert::IsTrue(testCommon::checkMatrix(uF2, F2p, 0.001));

		}

	};
}