#include "stdafx.h"
#include "CppUnitTest.h"
#include "PDE.h"

#include <Eigen/Dense>
#include "Math.h"
#include "testCommon.h"
#include "Common.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;
using namespace Eigen;
using namespace Leicester;

namespace UnitTest
{
	TEST_CLASS(testPDE)
	{
	public:

		vector<vector<MatrixXd>> Get3()
		{
			vector<MatrixXd> uLamb3;
			MatrixXd l1(15, 1);
			l1 << 168.177040362907, -384.857133569469, 437.285285931294, -355.212798882940, 443.385219414521, -109.178371522743, 221.964431301908, -185.896683167106, 91.7816691444462, -271.563020925667, 179.474487920222, -412.630669834898, 475.510735359416, -393.047823887079, 457.473155903381;
			uLamb3.push_back(l1);
			MatrixXd l2(15, 1);
			l2 << 266.292960914272, -700.744331062505, 759.616443800679, -184.485437051410, 574.752360107266, -715.267344742912, 324.264851093682, -938.943872118302, 1106.30094053661, -187.682488571149, 578.284311734800, -714.053999346216, 276.596980754002, -715.471078725550, 762.783738957473;
			uLamb3.push_back(l2);

			MatrixXd TX1 = MatrixXd(15, 2);
			TX1 << 0, 0, 0, 75, 0, 150, 0, 225, 0, 300, 0.4325, 0, 0.4325, 75, 0.4325, 150, 0.4325, 225, 0.4325, 300, 0.865, 0, 0.865, 75, 0.865, 150, 0.865, 225, 0.865, 300;
			MatrixXd TX2 = MatrixXd(15, 2);
			TX2 << 0, 0, 0, 150, 0, 300, 0.216250000000000, 0, 0.216250000000000, 150, 0.216250000000000, 300, 0.432500000000000, 0, 0.432500000000000, 150, 0.432500000000000, 300, 0.648750000000000, 0, 0.648750000000000, 150, 0.648750000000000, 300, 0.865000000000000, 0, 0.865000000000000, 150, 0.865000000000000, 300;
			vector<MatrixXd> uTX = { TX1, TX2 };

			MatrixXd c1(1, 2);
			c1 << 1.73000000000000, 600;
			MatrixXd c2(1, 2);
			c2 << 1.73000000000000, 600;
			vector<MatrixXd> uC = { c1, c2 };

			MatrixXd a1(1, 2);
			a1 << 2, 4;
			MatrixXd a2(1, 2);
			a2 << 4, 2;
			vector<MatrixXd> uA = { a1, a2 };
			vector<vector<MatrixXd>> third = { uLamb3, uTX, uC, uA };
			return third;
		};

		vector<vector<MatrixXd>> Get2()
		{
			vector<MatrixXd> uLamb3;
			MatrixXd l1(9, 1);
			l1 << 273.169921181606, -696.599817216584, 732.148991790275, -191.889255272131, 521.665751945236, -582.757329851410, 284.102691920217, -712.786022564190, 736.696836746533;
			uLamb3.push_back(l1);

			MatrixXd TX1 = MatrixXd(9, 2);
			TX1 << 0, 0, 0, 150, 0, 300, 0.432500000000000, 0, 0.432500000000000, 150, 0.432500000000000, 300, 0.865000000000000, 0, 0.865000000000000, 150, 0.865000000000000, 300;
			vector<MatrixXd> uTX = { TX1 };

			MatrixXd c1(1, 2);
			c1 << 1.73000000000000, 600;
			vector<MatrixXd> uC = { c1 };

			MatrixXd a1(1, 2);
			a1 << 2, 2;
			vector<MatrixXd> uA = { a1 };
			vector<vector<MatrixXd>> third = { uLamb3, uTX, uC, uA };
			return third;

		};

		TEST_METHOD(TestBlackScholes)
		{

			MatrixXd TX = MatrixXd(27, 2);
			//TX << 0, 0, 0, 150, 0, 300, 0.216250000000000, 0, 0.216250000000000, 150, 0.216250000000000, 300, 0.432500000000000, 0, 0.432500000000000, 150, 0.432500000000000, 300, 0.648750000000000, 0, 0.648750000000000, 150, 0.648750000000000, 300, 0.865000000000000, 0, 0.865000000000000, 150, 0.865000000000000, 300;
			TX << 0, 0, 0, 0.375000000000000, 0, 0.750000000000000, 0, 1.125000000000000, 0, 1.500000000000000, 0, 1.875000000000000, 0, 2.250000000000000, 0, 2.625000000000000, 0, 3.000000000000000, 0.004325000000000, 0, 0.004325000000000, 0.375000000000000, 0.004325000000000, 0.750000000000000, 0.004325000000000, 1.125000000000000, 0.004325000000000, 1.500000000000000, 0.004325000000000, 1.875000000000000, 0.004325000000000, 2.250000000000000, 0.004325000000000, 2.625000000000000, 0.004325000000000, 3.000000000000000, 0.008650000000000, 0, 0.008650000000000, 0.375000000000000, 0.008650000000000, 0.750000000000000, 0.008650000000000, 1.125000000000000, 0.008650000000000, 1.500000000000000, 0.008650000000000, 1.875000000000000, 0.008650000000000, 2.250000000000000, 0.008650000000000, 2.625000000000000, 0.008650000000000, 3.000000000000000;
			TX = TX.array() * 100;

			map< string, vector<vector<MatrixXd>>> interpolation;
			string k1 = "2";
			string k2 = "3";
			interpolation[k2] = Get3();
			interpolation[k1] = Get2();
			double r = 0.03; // interest rate
			double sigma = 0.15;

			MatrixXd uBS(27,1);
			//uBS << -1.05081915391381e-11,-7.03881397612349e-14,-29.2279844904297,5.65764102233857e-12,0.00100927902294767,28.2579024899607,-7.76803621427291e-12,-1.17239551400417e-13,17.7386073477481,2.18269013974037e-11,-0.0231424217281564,9.04438543475636,5.93509685842264e-11,-4.41083598377524,64.9279220507286;
			uBS << -0.000000000010508, 3.927644687806834, 3.549002056190618, 1.503536031177246, -0.000000000000070, -3.088521283991012, -10.874471089381121, -21.435736409230309, -29.227984490429737, -0.000000000007768, 0.580021750015930, 0.091365018135778, -0.298322712976102, -0.000000000000117, -0.195355900692951, -0.313929909813372, 4.471906042164757, 17.738607347748129, 0.000000000059351, -4.095075667545118, -5.675033019048676, -5.429665815582073, -4.410835983775236, -2.006729263828674, 6.785318426717658, 29.075126158623416, 64.927922050728611;
			MatrixXd z = MatrixXd::Zero(27, 1);
			//auto pde = PDE();
			MatrixXd result = z - PDE::BlackScholes(TX, r, sigma,
				interpolation[k1][0], interpolation[k1][1], interpolation[k1][2], interpolation[k1][3],
				interpolation[k2][0], interpolation[k2][1], interpolation[k2][2], interpolation[k2][3]);

			//Logger::WriteMessage(Common::printMatrix(result[0]).c_str());
			Assert::IsTrue(testCommon::checkMatrix(uBS, result, 0.0000001));
			
		}



	};
}