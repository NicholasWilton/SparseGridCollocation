#include "stdafx.h"
#include "CppUnitTest.h"
#include "SparseGridCollocation.h"
#include "RBF.h"
#include <Eigen/Dense>
#include "Math.h"
#include "testCommon.h"
#include "Common.h"
#include <chrono>
#include <sstream>

using namespace Microsoft::VisualStudio::CppUnitTestFramework;
using namespace Eigen;
using namespace Leicester;


namespace UnitTest
{
	TEST_CLASS(testMq)
	{
	public:

		TEST_METHOD(BenchMarkEigenMatrixMult)
		{
			MatrixXd TX = MatrixXd(15, 2);
			TX << 0, 0, 0, 75, 0, 150, 0, 225, 0, 300, 0.4325, 0, 0.4325, 75, 0.4325, 150, 0.4325, 225, 0.4325, 300, 0.865, 0, 0.865, 75, 0.865, 150, 0.865, 225, 0.865, 300;
			MatrixXd TX1 = MatrixXd(TX);

			TX1.transposeInPlace();

			auto start = std::chrono::high_resolution_clock::now();
			MatrixXd res = TX * TX1;
			auto finish = std::chrono::high_resolution_clock::now();
			
			auto microseconds = std::chrono::duration_cast<std::chrono::microseconds>(finish - start);
			stringstream ss;
			ss << microseconds.count() << "µs\n";
			Logger::WriteMessage(ss.str().c_str());

		}

		TEST_METHOD(TestMq2d)
		{
			

			MatrixXd C(1, 2);
			C << 1.73, 600;
			MatrixXd A(1, 2);
			A << 2, 4;

			MatrixXd TX = MatrixXd(15, 2);
			TX << 0, 0, 0, 75, 0, 150, 0, 225, 0, 300, 0.4325, 0, 0.4325, 75, 0.4325, 150, 0.4325, 225, 0.4325, 300, 0.865, 0, 0.865, 75, 0.865, 150, 0.865, 225, 0.865, 300;
			MatrixXd TX1 = MatrixXd(TX);

			MatrixXd uFAI(15, 15);
			uFAI << 1, 0.778800783071405, 0.367879441171442, 0.105399224561864, 0.0183156388887342, 0.778800783071405, 0.606530659712633, 0.286504796860190, 0.0820849986238988, 0.0142642339089993, 0.367879441171442, 0.286504796860190, 0.135335283236613, 0.0387742078317220, 0.00673794699908547, 0.778800783071405, 1, 0.778800783071405, 0.367879441171442, 0.105399224561864, 0.606530659712633, 0.778800783071405, 0.606530659712633, 0.286504796860190, 0.0820849986238988, 0.286504796860190, 0.367879441171442, 0.286504796860190, 0.135335283236613, 0.0387742078317220, 0.367879441171442, 0.778800783071405, 1, 0.778800783071405, 0.367879441171442, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.606530659712633, 0.286504796860190, 0.135335283236613, 0.286504796860190, 0.367879441171442, 0.286504796860190, 0.135335283236613, 0.105399224561864, 0.367879441171442, 0.778800783071405, 1, 0.778800783071405, 0.0820849986238988, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.606530659712633, 0.0387742078317220, 0.135335283236613, 0.286504796860190, 0.367879441171442, 0.286504796860190, 0.0183156388887342, 0.105399224561864, 0.367879441171442, 0.778800783071405, 1, 0.0142642339089993, 0.0820849986238988, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.00673794699908547, 0.0387742078317220, 0.135335283236613, 0.286504796860190, 0.367879441171442, 0.778800783071405, 0.606530659712633, 0.286504796860190, 0.0820849986238988, 0.0142642339089993, 1, 0.778800783071405, 0.367879441171442, 0.105399224561864, 0.0183156388887342, 0.778800783071405, 0.606530659712633, 0.286504796860190, 0.0820849986238988, 0.0142642339089993, 0.606530659712633, 0.778800783071405, 0.606530659712633, 0.286504796860190, 0.0820849986238988, 0.778800783071405, 1, 0.778800783071405, 0.367879441171442, 0.105399224561864, 0.606530659712633, 0.778800783071405, 0.606530659712633, 0.286504796860190, 0.0820849986238988, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.606530659712633, 0.286504796860190, 0.367879441171442, 0.778800783071405, 1, 0.778800783071405, 0.367879441171442, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.606530659712633, 0.286504796860190, 0.0820849986238988, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.606530659712633, 0.105399224561864, 0.367879441171442, 0.778800783071405, 1, 0.778800783071405, 0.0820849986238988, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.606530659712633, 0.0142642339089993, 0.0820849986238988, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.0183156388887342, 0.105399224561864, 0.367879441171442, 0.778800783071405, 1, 0.0142642339089993, 0.0820849986238988, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.367879441171442, 0.286504796860190, 0.135335283236613, 0.0387742078317220, 0.00673794699908547, 0.778800783071405, 0.606530659712633, 0.286504796860190, 0.0820849986238988, 0.0142642339089993, 1, 0.778800783071405, 0.367879441171442, 0.105399224561864, 0.0183156388887342, 0.286504796860190, 0.367879441171442, 0.286504796860190, 0.135335283236613, 0.0387742078317220, 0.606530659712633, 0.778800783071405, 0.606530659712633, 0.286504796860190, 0.0820849986238988, 0.778800783071405, 1, 0.778800783071405, 0.367879441171442, 0.105399224561864, 0.135335283236613, 0.286504796860190, 0.367879441171442, 0.286504796860190, 0.135335283236613, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.606530659712633, 0.286504796860190, 0.367879441171442, 0.778800783071405, 1, 0.778800783071405, 0.367879441171442, 0.0387742078317220, 0.135335283236613, 0.286504796860190, 0.367879441171442, 0.286504796860190, 0.0820849986238988, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.606530659712633, 0.105399224561864, 0.367879441171442, 0.778800783071405, 1, 0.778800783071405, 0.00673794699908547, 0.0387742078317220, 0.135335283236613, 0.286504796860190, 0.367879441171442, 0.0142642339089993, 0.0820849986238988, 0.286504796860190, 0.606530659712633, 0.778800783071405, 0.0183156388887342, 0.105399224561864, 0.367879441171442, 0.778800783071405, 1;
			MatrixXd uFAI_t = MatrixXd(15, 15);
			uFAI_t << 0, 0, 0, 0, 0, 0.900347726094110, 0.701191514118651, 0.331219418335480, 0.0948959521663570, 0.0164904438254327, 0.850588303286572, 0.662438836670960, 0.312913949680029, 0.0896513475877965, 0.0155790682059780, 0, 0, 0, 0, 0, 0.701191514118651, 0.900347726094110, 0.701191514118651, 0.331219418335480, 0.0948959521663570, 0.662438836670960, 0.850588303286572, 0.662438836670960, 0.312913949680029, 0.0896513475877965, 0, 0, 0, 0, 0, 0.331219418335480, 0.701191514118651, 0.900347726094110, 0.701191514118651, 0.331219418335480, 0.312913949680029, 0.662438836670960, 0.850588303286572, 0.662438836670960, 0.312913949680029, 0, 0, 0, 0, 0, 0.0948959521663570, 0.331219418335480, 0.701191514118651, 0.900347726094110, 0.701191514118651, 0.0896513475877965, 0.312913949680029, 0.662438836670960, 0.850588303286572, 0.662438836670960, 0, 0, 0, 0, 0, 0.0164904438254327, 0.0948959521663570, 0.331219418335480, 0.701191514118651, 0.900347726094110, 0.0155790682059780, 0.0896513475877965, 0.312913949680029, 0.662438836670960, 0.850588303286572, -0.900347726094110, -0.701191514118651, -0.331219418335480, -0.0948959521663570, -0.0164904438254327, 0, 0, 0, 0, 0, 0.900347726094110, 0.701191514118651, 0.331219418335480, 0.0948959521663570, 0.0164904438254327, -0.701191514118651, -0.900347726094110, -0.701191514118651, -0.331219418335480, -0.0948959521663570, 0, 0, 0, 0, 0, 0.701191514118651, 0.900347726094110, 0.701191514118651, 0.331219418335480, 0.0948959521663570, -0.331219418335480, -0.701191514118651, -0.900347726094110, -0.701191514118651, -0.331219418335480, 0, 0, 0, 0, 0, 0.331219418335480, 0.701191514118651, 0.900347726094110, 0.701191514118651, 0.331219418335480, -0.0948959521663570, -0.331219418335480, -0.701191514118651, -0.900347726094110, -0.701191514118651, 0, 0, 0, 0, 0, 0.0948959521663570, 0.331219418335480, 0.701191514118651, 0.900347726094110, 0.701191514118651, -0.0164904438254327, -0.0948959521663570, -0.331219418335480, -0.701191514118651, -0.900347726094110, 0, 0, 0, 0, 0, 0.0164904438254327, 0.0948959521663570, 0.331219418335480, 0.701191514118651, 0.900347726094110, -0.850588303286572, -0.662438836670960, -0.312913949680029, -0.0896513475877965, -0.0155790682059780, -0.900347726094110, -0.701191514118651, -0.331219418335480, -0.0948959521663570, -0.0164904438254327, 0, 0, 0, 0, 0, -0.662438836670960, -0.850588303286572, -0.662438836670960, -0.312913949680029, -0.0896513475877965, -0.701191514118651, -0.900347726094110, -0.701191514118651, -0.331219418335480, -0.0948959521663570, 0, 0, 0, 0, 0, -0.312913949680029, -0.662438836670960, -0.850588303286572, -0.662438836670960, -0.312913949680029, -0.331219418335480, -0.701191514118651, -0.900347726094110, -0.701191514118651, -0.331219418335480, 0, 0, 0, 0, 0, -0.0896513475877965, -0.312913949680029, -0.662438836670960, -0.850588303286572, -0.662438836670960, -0.0948959521663570, -0.331219418335480, -0.701191514118651, -0.900347726094110, -0.701191514118651, 0, 0, 0, 0, 0, -0.0155790682059780, -0.0896513475877965, -0.312913949680029, -0.662438836670960, -0.850588303286572, -0.0164904438254327, -0.0948959521663570, -0.331219418335480, -0.701191514118651, -0.900347726094110, 0, 0, 0, 0, 0;
			MatrixXd uFAI_x(15, 15);
			uFAI_x << 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.389400391535703, 0, 0.389400391535703, 0.367879441171442, 0.158098836842797, -0.303265329856317, 0, 0.303265329856317, 0.286504796860190, 0.123127497935848, -0.143252398430095, 0, 0.143252398430095, 0.135335283236613, 0.0581613117475830, -0.735758882342885, -0.778800783071405, 0, 0.778800783071405, 0.735758882342885, -0.573009593720380, -0.606530659712634, 0, 0.606530659712634, 0.573009593720380, -0.270670566473225, -0.286504796860190, 0, 0.286504796860190, 0.270670566473225, -0.474296510528390, -1.10363832351433, -1.16820117460711, 0, 1.16820117460711, -0.369382493807545, -0.859514390580571, -0.909795989568951, 0, 0.909795989568951, -0.174483935242749, -0.406005849709838, -0.429757195290285, 0, 0.429757195290285, -0.146525111109873, -0.632395347371186, -1.47151776468577, -1.55760156614281, 0, -0.114113871271994, -0.492509991743393, -1.14601918744076, -1.21306131942527, 0, -0.0539035759926838, -0.232645246990332, -0.541341132946451, -0.573009593720380, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.303265329856317, 0, 0.303265329856317, 0.286504796860190, 0.123127497935848, -0.389400391535703, 0, 0.389400391535703, 0.367879441171442, 0.158098836842797, -0.303265329856317, 0, 0.303265329856317, 0.286504796860190, 0.123127497935848, -0.573009593720380, -0.606530659712634, 0, 0.606530659712634, 0.573009593720380, -0.735758882342885, -0.778800783071405, 0, 0.778800783071405, 0.735758882342885, -0.573009593720380, -0.606530659712634, 0, 0.606530659712634, 0.573009593720380, -0.369382493807545, -0.859514390580571, -0.909795989568951, 0, 0.909795989568951, -0.474296510528390, -1.10363832351433, -1.16820117460711, 0, 1.16820117460711, -0.369382493807545, -0.859514390580571, -0.909795989568951, 0, 0.909795989568951, -0.114113871271994, -0.492509991743393, -1.14601918744076, -1.21306131942527, 0, -0.146525111109873, -0.632395347371186, -1.47151776468577, -1.55760156614281, 0, -0.114113871271994, -0.492509991743393, -1.14601918744076, -1.21306131942527, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.143252398430095, 0, 0.143252398430095, 0.135335283236613, 0.0581613117475830, -0.303265329856317, 0, 0.303265329856317, 0.286504796860190, 0.123127497935848, -0.389400391535703, 0, 0.389400391535703, 0.367879441171442, 0.158098836842797, -0.270670566473225, -0.286504796860190, 0, 0.286504796860190, 0.270670566473225, -0.573009593720380, -0.606530659712634, 0, 0.606530659712634, 0.573009593720380, -0.735758882342885, -0.778800783071405, 0, 0.778800783071405, 0.735758882342885, -0.174483935242749, -0.406005849709838, -0.429757195290285, 0, 0.429757195290285, -0.369382493807545, -0.859514390580571, -0.909795989568951, 0, 0.909795989568951, -0.474296510528390, -1.10363832351433, -1.16820117460711, 0, 1.16820117460711, -0.0539035759926838, -0.232645246990332, -0.541341132946451, -0.573009593720380, 0, -0.114113871271994, -0.492509991743393, -1.14601918744076, -1.21306131942527, 0, -0.146525111109873, -0.632395347371186, -1.47151776468577, -1.55760156614281, 0;
			MatrixXd uFAI_xx(15, 15);
			uFAI_xx << 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.194700195767851, -0.500000000000000, -0.194700195767851, 0.183939720585721, 0.184448642983263, -0.151632664928158, -0.389400391535702, -0.151632664928158, 0.143252398430095, 0.143648747591823, -0.0716261992150475, -0.183939720585721, -0.0716261992150475, 0.0676676416183064, 0.0678548637055135, 0.735758882342885, -0.778800783071405, -2, -0.778800783071405, 0.735758882342885, 0.573009593720380, -0.606530659712633, -1.55760156614281, -0.606530659712633, 0.573009593720380, 0.270670566473225, -0.286504796860190, -0.735758882342885, -0.286504796860190, 0.270670566473225, 1.66003778684936, 1.65545748527149, -1.75230176191066, -4.50000000000000, -1.75230176191066, 1.29283872832641, 1.28927158587086, -1.36469398435343, -3.50460352382132, -1.36469398435343, 0.610693773349622, 0.609008774564757, -0.644635792935428, -1.65545748527149, -0.644635792935428, 1.02567577776911, 2.95117828773220, 2.94303552937154, -3.11520313228562, -8, 0.798797098903958, 2.29837996146917, 2.29203837488152, -2.42612263885053, -6.23040626457124, 0.377325031948786, 1.08567781928822, 1.08268226589290, -1.14601918744076, -2.94303552937154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.151632664928158, -0.389400391535702, -0.151632664928158, 0.143252398430095, 0.143648747591823, -0.194700195767851, -0.500000000000000, -0.194700195767851, 0.183939720585721, 0.184448642983263, -0.151632664928158, -0.389400391535702, -0.151632664928158, 0.143252398430095, 0.143648747591823, 0.573009593720380, -0.606530659712633, -1.55760156614281, -0.606530659712633, 0.573009593720380, 0.735758882342885, -0.778800783071405, -2, -0.778800783071405, 0.735758882342885, 0.573009593720380, -0.606530659712633, -1.55760156614281, -0.606530659712633, 0.573009593720380, 1.29283872832641, 1.28927158587086, -1.36469398435343, -3.50460352382132, -1.36469398435343, 1.66003778684936, 1.65545748527149, -1.75230176191066, -4.50000000000000, -1.75230176191066, 1.29283872832641, 1.28927158587086, -1.36469398435343, -3.50460352382132, -1.36469398435343, 0.798797098903958, 2.29837996146917, 2.29203837488152, -2.42612263885053, -6.23040626457124, 1.02567577776911, 2.95117828773220, 2.94303552937154, -3.11520313228562, -8, 0.798797098903958, 2.29837996146917, 2.29203837488152, -2.42612263885053, -6.23040626457124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0716261992150475, -0.183939720585721, -0.0716261992150475, 0.0676676416183064, 0.0678548637055135, -0.151632664928158, -0.389400391535702, -0.151632664928158, 0.143252398430095, 0.143648747591823, -0.194700195767851, -0.500000000000000, -0.194700195767851, 0.183939720585721, 0.184448642983263, 0.270670566473225, -0.286504796860190, -0.735758882342885, -0.286504796860190, 0.270670566473225, 0.573009593720380, -0.606530659712633, -1.55760156614281, -0.606530659712633, 0.573009593720380, 0.735758882342885, -0.778800783071405, -2, -0.778800783071405, 0.735758882342885, 0.610693773349622, 0.609008774564757, -0.644635792935428, -1.65545748527149, -0.644635792935428, 1.29283872832641, 1.28927158587086, -1.36469398435343, -3.50460352382132, -1.36469398435343, 1.66003778684936, 1.65545748527149, -1.75230176191066, -4.50000000000000, -1.75230176191066, 0.377325031948786, 1.08567781928822, 1.08268226589290, -1.14601918744076, -2.94303552937154, 0.798797098903958, 2.29837996146917, 2.29203837488152, -2.42612263885053, -6.23040626457124, 1.02567577776911, 2.95117828773220, 2.94303552937154, -3.11520313228562, -8;

			vector<MatrixXd> result = RBF::Gaussian2D(TX, TX1, A, C);

			Logger::WriteMessage(Common::printMatrix(result[0]).c_str());
			Assert::IsTrue(testCommon::checkMatrix(uFAI, result[0], 0.000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI, result[0], 0.0000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI, result[0], 0.00000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI, result[0], 0.000000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI, result[0], 0.0000000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI, result[0], 0.00000000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI, result[0], 0.000000000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_t, result[1], 0.0000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_t, result[1], 0.00000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_t, result[1], 0.000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_t, result[1], 0.0000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_t, result[1], 0.00000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_t, result[1], 0.000000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_t, result[1], 0.0000000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_t, result[1], 0.00000000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_t, result[1], 0.000000000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_x, result[2], 0.0000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_x, result[2], 0.00000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_x, result[2], 0.000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_x, result[2], 0.0000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_x, result[2], 0.00000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_x, result[2], 0.000000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_x, result[2], 0.0000000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_x, result[2], 0.00000000000001));
			//Assert::IsTrue(testCommon::checkMatrix(uFAI_x, result[2], 0.000000000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_xx, result[3], 0.0000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_xx, result[3], 0.00000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_xx, result[3], 0.000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_xx, result[3], 0.0000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_xx, result[3], 0.00000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_xx, result[3], 0.000000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_xx, result[3], 0.0000000000001));
			Assert::IsTrue(testCommon::checkMatrix(uFAI_xx, result[3], 0.00000000000001));
			//Assert::IsTrue(testCommon::checkMatrix(uFAI_xx, result[3], 0.000000000000001));
			
		}



	};
}